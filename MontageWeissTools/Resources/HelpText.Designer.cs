//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Montage.Weiss.Tools.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HelpText {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpText() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Montage.Weiss.Tools.Resources.HelpText", typeof(HelpText).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fetches data directly from the default APIs used for fetching card data, fetches all card sets related to it, and parses them and saves them to the local card database..
        /// </summary>
        public static string Fetch_HelpText {
            get {
                return ResourceManager.GetString("Fetch_HelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the Release IDs/Serials that needs to be imported.Note that importing a serial will automatically export the set belonging to that serial, not just the card itself..
        /// </summary>
        public static string Fetch_RIDorSerialHelpText {
            get {
                return ResourceManager.GetString("Fetch_RIDorSerialHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a hint as to what parser should be used or if post-processors are skipped (if any)..
        /// </summary>
        public static string Fetch_WithHelpText {
            get {
                return ResourceManager.GetString("Fetch_WithHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any flags that should be passed for parsing the deck..
        /// </summary>
        public static string Merge_FlagsHelpText {
            get {
                return ResourceManager.GetString("Merge_FlagsHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merges a deck with a list of cards to replace, and puts the output into stdout..
        /// </summary>
        public static string Merge_HelpText {
            get {
                return ResourceManager.GetString("Merge_HelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The merge map that will be used for the original deck..
        /// </summary>
        public static string Merge_MergeMapJSONPathHelpText {
            get {
                return ResourceManager.GetString("Merge_MergeMapJSONPathHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source for the original deck..
        /// </summary>
        public static string Merge_SourceHelpText {
            get {
                return ResourceManager.GetString("Merge_SourceHelpText", resourceCulture);
            }
        }
    }
}
