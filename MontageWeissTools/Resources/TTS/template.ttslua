-- Deck Generator Tool v0.0.3
-- This script was inspired by Card Naming Tool which was created by dzikakulka, 
-- and co-authored and published by Hiram Abiff.
-- Created specifically for wstools, do not edit unless you know what you're doing.

deckName = <deck_name_info_placeholder>
serialsJSON = <serials_placeholder>
serialInfoJSON = <serial_info_placeholder>

-- Unless looking to troubleshoot, everything below this point should not need to be changed.
windowName = "deckGeneratorWindow"
defaultCharacterSleevesURL = "https://i.imgur.com/fRYj5tS.jpg"

function onLoad()
	print("Deck Generator ("..deckName..")")
	print("Note: Please ensure there are no other Deck Generators for this session. Also, please upload the deck.png first into the cloud and/or imgur.")
	print("To generate, type: +generate <url_for_deck> [<url_for_sleeves>]")
	print("There is also a UI now which I highly recommend.")
	self.addContextMenuItem("Open UI", afterLoad)
	Wait.condition(afterLoad, checkCondition)
end

function checkCondition()
	return self.UI.getXml() != ""
end

function afterLoad()
	oldGlobalUIXML = UI.getXml()
	newUIXML = self.UI.getXml()
	uiCharaSleeves = defaultCharacterSleevesURL
	UI.setXml(newUIXML)
	self.UI.hide(windowName)
	Wait.frames(adjustButtons, 1)
end

function adjustButtons()
	selfGUID = self.getGUID()
--	print("Debug. Adjusting Buttons!")
	makeRelative("closeButton", "onClick")
	makeRelative("generateButton", "onClick")
	makeRelative("deckImageText", "onValueChanged")
	makeRelative("charaSleevesText", "onValueChanged")
	Wait.frames(addVariables, 1)
end

function addVariables()
	UI.setAttribute("deckNameText", "Text", deckName)
	UI.show(windowName)
end

function onDestroy()
	UI.setXml(oldGlobalUIXML)
end

function makeRelative(button, eventAttribute)
	Wait.Frames(function() UI.setAttribute(button, eventAttribute, selfGUID.."/"..self.UI.getAttribute(button, eventAttribute)) end, 1)
end

-- Function to close the window
function close(player, value, id)
	UI.hide(windowName)
	UI.setXml(oldGlobalUIXML)
end

function minimize(player, value, id)
	-- Is the size of the window bigger than its top bar?
	if(tonumber(UI.getAttribute(windowName, "Height")) > tonumber(UI.getAttribute("TopBar", "Height"))) then
	  UI.setAttribute(windowName, "OffsetXY", "0 135") -- Offset is set to (Height - Height_of_Top_Bar) /2
	  UI.setAttribute(windowName, "Height", tonumber(UI.getAttribute("TopBar", "Height")))
	else
	  UI.setAttribute(windowName,"OffsetXY", "0 0")
	  UI.setAttribute(windowName, "Height", 300)
	end
end

function setDeckImage(player, value, id)
	uiDeckImage = value
end

function setCharacterSleeves(player, value, id)
	uiCharaSleeves = value
	if (uiCharaSleeves == "") then 
		uiCharaSleeves = defaultCharacterSleevesURL
	end
end

function generateDeckViaUI(player, value, id)
	if (uiDeckImage ~= nil) then
		print("stub"..uiDeckImage.." - "..uiCharaSleeves)
		generateDeck(uiDeckImage, uiCharaSleeves)
	end
end

function onChat(message, player)
	local command = "+generate"
    print(message)
    print(player.color)
	local subcomm = message:sub(1, #command)
	if subcomm == command then
		print("Running Generate Deck")
		local splitStr = split(message)
		local back = splitStr[3]
		if back == nil then back = defaultCharacterSleevesURL end
		generateDeck(splitStr[2], back)
	end
end

function split(str)
	local output = {}
	local index = 1
	for i in string.gmatch(str, "%S+") do
		output[index] = i
		index = index + 1
	end
	return output
end

--function onClick(obj, color, alt_click)
function generateDeck(faces, back)
	local serials = JSON.decode(serialsJSON)
	local serialInfo = JSON.decode(serialInfoJSON)
	local spawnParameters = {
		type = "DeckCustom",
		name = deckname,
		callback_function = function(obj) onDeckLoaded(obj, deckname, serials, serialInfo) end
	}
	local obj = spawnObject(spawnParameters)
	local customDeckParameters = {
		face = faces,
		back = back,
		unique_back = false,
		height = math.ceil(#serials / 10.0),
		number = #serials,
		back_is_hidden = true,
	}
	obj.setCustomObject(customDeckParameters)
end

function onDeckLoaded(obj, deckname, serials, serialInfo)
	print("Deck Loaded.")
	for i = 1, #serials, 1 do
		local serial = serials[i]
		local name = serialInfo[serial]["Name"]
		local description = serialInfo[serial]["Description"]
		local card = obj.takeObject({
			position = obj.positionToWorld({0, 0.5, 0}),
			smooth = true,
			top = false
		})
		renameCard(card, name, description, i)
	end
	print("Deck Successfully Generated. Once all files are accounted for, please save that object for reuse.")
end

function renameCard(card, name, description, ix)
	card.setName(name)
	card.setDescription(description)
	--card.setPositionSmooth({0, ix * 0.125, 0})
	--Wait.frames(function() card.setPositionSmooth({0, ix * 0.0125,0}) end, ix)
end